type definite_canister_settings = 
 record {
   compute_allocation: nat;
   controllers: vec principal;
   freezing_threshold: nat;
   memory_allocation: nat;
 };
type Votes = 
 record {
   no: nat;
   notVoted: nat;
   yes: nat;
 };
type VoteRequest = 
 record {
   axonId: nat;
   proposalId: nat;
   vote: Vote;
 };
type Vote = 
 variant {
   No;
   Yes;
 };
type Visibility = 
 variant {
   Private;
   Public;
 };
type Threshold = 
 variant {
   Absolute: nat;
   Percent: record {
              percent: nat;
              quorum: opt nat;
            };
 };
type Tally = 
 record {
   no: nat64;
   timestamp_seconds: nat64;
   total: nat64;
   yes: nat64;
 };
type Status = 
 variant {
   Accepted: int;
   Active: int;
   Cancelled: int;
   Created: int;
   ExecutionFinished: int;
   ExecutionQueued: int;
   ExecutionStarted: int;
   ExecutionTimedOut: int;
   Expired: int;
   Rejected: int;
 };
type Split = record {amount_e8s: nat64;};
type SpawnResponse = record {created_neuron_id: opt NeuronId;};
type Spawn = record {new_controller: opt principal;};
type SetDissolveTimestamp = record {dissolve_timestamp_seconds: nat64;};
type SetDefaultFollowees = record {
                             default_followees: vec record {
                                                      int32;
                                                      Followees;
                                                    };};
type RewardToNeuron = record {dissolve_delay_seconds: nat64;};
type RewardToAccount = record {to_account: opt AccountIdentifier;};
type RewardNodeProvider = 
 record {
   amount_e8s: nat64;
   node_provider: opt NodeProvider;
   reward_mode: opt RewardMode;
 };
type RewardMode = 
 variant {
   RewardToAccount: RewardToAccount;
   RewardToNeuron: RewardToNeuron;
 };
type Result__1 = 
 variant {
   err: text;
   ok: blob;
 };
type Result_4 = 
 variant {
   err: Error;
   ok: AxonPublic;
 };
type Result_3 = 
 variant {
   err: Error;
   ok: AxonProposal;
 };
type Result_2 = 
 variant {
   err: Error;
   ok: opt ProposalInfo;
 };
type Result_1 = 
 variant {
   err: Error;
   ok: ManageNeuronResponse;
 };
type Result = 
 variant {
   err: Error;
   ok;
 };
type RemoveHotKey = record {hot_key_to_remove: opt principal;};
type RegisterVote = 
 record {
   proposal: opt NeuronId;
   vote: int32;
 };
type Proxy = 
 service {
   call_raw: (principal, text, blob) -> (Result__1);
   list_neurons: () -> (ListNeuronsResponse);
   manage_neuron: (ManageNeuron) -> (ManageNeuronResponse);
   recycle_cycles: (principal, nat) -> (nat);
 };
type ProposalType = 
 variant {
   AxonCommand: AxonCommand;
   CanisterCommand: CanisterCommand;
   NeuronCommand: NeuronCommand;
 };
type ProposalResult = 
 variant {
   err: Error;
   ok: vec AxonProposal;
 };
type ProposalInfo = 
 record {
   ballots: vec record {
                  nat64;
                  Ballot;
                };
   decided_timestamp_seconds: nat64;
   executed_timestamp_seconds: nat64;
   failed_timestamp_seconds: nat64;
   failure_reason: opt GovernanceError;
   id: opt NeuronId;
   latest_tally: opt Tally;
   proposal: opt Proposal;
   proposal_timestamp_seconds: nat64;
   proposer: opt NeuronId;
   reject_cost_e8s: nat64;
   reward_event_round: nat64;
   reward_status: int32;
   status: int32;
   topic: int32;
 };
type Proposal = 
 record {
   action: opt Action;
   summary: text;
   url: text;
 };
type Policy = 
 record {
   acceptanceThreshold: Threshold;
   allowTokenBurn: bool;
   proposeThreshold: nat;
   proposers: variant {
                Closed: vec principal;
                Open;
              };
   restrictTokenTransfer: bool;
 };
type Operation = 
 variant {
   AddHotKey: AddHotKey;
   IncreaseDissolveDelay: IncreaseDissolveDelay;
   RemoveHotKey: RemoveHotKey;
   SetDissolveTimestamp: SetDissolveTimestamp;
   StartDissolving: record {};
   StopDissolving: record {};
 };
type NodeProvider = record {id: opt principal;};
type NewProposal = 
 record {
   axonId: nat;
   durationSeconds: opt nat;
   execute: opt bool;
   proposal: ProposalType;
   timeStart: opt int;
 };
type NeuronsResult = 
 variant {
   err: Error;
   ok: Neurons;
 };
type Neurons = 
 record {
   response: ListNeuronsResponse;
   timestamp: int;
 };
type NeuronStakeTransfer = 
 record {
   block_height: nat64;
   from: opt principal;
   from_subaccount: vec nat8;
   memo: nat64;
   neuron_stake_e8s: nat64;
   to_subaccount: vec nat8;
   transfer_timestamp: nat64;
 };
type NeuronInfo = 
 record {
   age_seconds: nat64;
   created_timestamp_seconds: nat64;
   dissolve_delay_seconds: nat64;
   recent_ballots: vec BallotInfo;
   retrieved_at_timestamp_seconds: nat64;
   state: int32;
   voting_power: nat64;
 };
type NeuronId = record {id: nat64;};
type NeuronCommandResponse = 
 record {
   nat64;
   vec ManageNeuronResponseOrProposal;
 };
type NeuronCommandRequest = 
 record {
   command: Command;
   neuronIds: opt vec nat64;
 };
type NeuronCommand = 
 record {
   NeuronCommandRequest;
   opt vec NeuronCommandResponse;
 };
type Neuron = 
 record {
   account: vec nat8;
   aging_since_timestamp_seconds: nat64;
   cached_neuron_stake_e8s: nat64;
   controller: opt principal;
   created_timestamp_seconds: nat64;
   dissolve_state: opt DissolveState;
   followees: vec record {
                    int32;
                    Followees;
                  };
   hot_keys: vec principal;
   id: opt NeuronId;
   kyc_verified: bool;
   maturity_e8s_equivalent: nat64;
   neuron_fees_e8s: nat64;
   not_for_profit: bool;
   recent_ballots: vec BallotInfo;
   transfer: opt NeuronStakeTransfer;
 };
type NetworkEconomics = 
 record {
   max_proposals_to_keep_per_topic: nat32;
   maximum_node_provider_rewards_e8s: nat64;
   minimum_icp_xdr_rate: nat64;
   neuron_management_fee_per_proposal_e8s: nat64;
   neuron_minimum_stake_e8s: nat64;
   neuron_spawn_dissolve_delay_seconds: nat64;
   reject_cost_e8s: nat64;
   transaction_fee_e8s: nat64;
 };
type Motion__1 = 
 record {
   body: text;
   title: text;
   url: text;
 };
type Motion = record {motion_text: text;};
type ManageNeuronResponseOrProposal = 
 variant {
   ManageNeuronResponse: Result_1;
   ProposalInfo: Result_2;
 };
type ManageNeuronResponse = record {command: opt Command_1;};
type ManageNeuron = 
 record {
   command: opt Command;
   id: opt NeuronId;
 };
type MakeProposalResponse = record {proposal_id: opt NeuronId;};
type ListNeuronsResponse = 
 record {
   full_neurons: vec Neuron;
   neuron_infos: vec record {
                       nat64;
                       NeuronInfo;
                     };
 };
type LedgerEntry = 
 record {
   principal;
   nat;
 };
type Initialization = 
 record {
   ledgerEntries: vec LedgerEntry;
   name: text;
   policy: Policy;
   visibility: Visibility;
 };
type IncreaseDissolveDelay = record {
                               additional_dissolve_delay_seconds: nat32;};
type GovernanceError = 
 record {
   error_message: text;
   error_type: int32;
 };
type Followees = record {followees: vec NeuronId;};
type Follow = 
 record {
   followees: vec NeuronId;
   topic: int32;
 };
type ExecuteNnsFunction = 
 record {
   nns_function: int32;
   payload: vec nat8;
 };
type ErrorCode = 
 variant {
   canister_error;
   canister_reject;
   destination_invalid;
   future: nat32;
   system_fatal;
   system_transient;
 };
type Error = 
 variant {
   AlreadyVoted;
   CannotExecute;
   CannotVote;
   Error: record {
            error_message: text;
            error_type: ErrorCode;
          };
   GovernanceError: GovernanceError;
   InsufficientBalance;
   InsufficientBalanceToPropose;
   InvalidProposal;
   NoNeurons;
   NotAllowedByPolicy;
   NotFound;
   NotProposer;
   ProposalNotFound;
   Unauthorized;
 };
type DissolveState = 
 variant {
   DissolveDelaySeconds: nat64;
   WhenDissolvedTimestampSeconds: nat64;
 };
type DisburseToNeuron = 
 record {
   amount_e8s: nat64;
   dissolve_delay_seconds: nat64;
   kyc_verified: bool;
   new_controller: opt principal;
   nonce: nat64;
 };
type DisburseResponse = record {transfer_block_height: nat64;};
type Disburse = 
 record {
   amount: opt Amount;
   to_account: opt AccountIdentifier;
 };
type Configure = record {operation: opt Operation;};
type Command_1 = 
 variant {
   Configure: record {};
   Disburse: DisburseResponse;
   DisburseToNeuron: SpawnResponse;
   Error: GovernanceError;
   Follow: record {};
   MakeProposal: MakeProposalResponse;
   RegisterVote: record {};
   Spawn: SpawnResponse;
   Split: SpawnResponse;
 };
type Command = 
 variant {
   Configure: Configure;
   Disburse: Disburse;
   DisburseToNeuron: DisburseToNeuron;
   Follow: Follow;
   MakeProposal: Proposal;
   RegisterVote: RegisterVote;
   Spawn: Spawn;
   Split: Split;
 };
type Change = 
 variant {
   ToAdd: NodeProvider;
   ToRemove: NodeProvider;
 };
type CanisterStatusResult = 
 record {
   cycles: nat;
   memory_size: nat;
   module_hash: opt vec nat8;
   settings: definite_canister_settings;
   status: variant {
             running;
             stopped;
             stopping;
           };
 };
type CanisterCommandResponse = 
 variant {
   error: text;
   reply: blob;
 };
type CanisterCommandRequest = 
 record {
   argumentBinary: blob;
   canister: principal;
   functionName: text;
 };
type CanisterCommand = 
 record {
   CanisterCommandRequest;
   opt CanisterCommandResponse;
 };
type Ballot__1 = 
 record {
   "principal": principal;
   vote: opt Vote;
   votingPower: nat;
 };
type BallotInfo = 
 record {
   proposal_id: opt NeuronId;
   vote: int32;
 };
type Ballot = 
 record {
   vote: int32;
   voting_power: nat64;
 };
type AxonService = 
 service {
   add_admin: (principal) -> ();
   axonById: (nat) -> (AxonPublic) query;
   axonStatusById: (nat) -> (CanisterStatusResult);
   balanceOf: (nat, opt principal) -> (nat) query;
   cancel: (nat, nat) -> (Result_3);
   cleanup: (nat) -> (Result);
   count: () -> (nat) query;
   create: (Initialization) -> (Result_4);
   cycles: () -> (nat) query;
   execute: (nat, nat) -> (Result_3);
   getActiveProposals: (nat) -> (ProposalResult) query;
   getAllProposals: (nat, opt nat) -> (ProposalResult) query;
   getMotionProposals: (nat) -> (ProposalResult) query;
   getNeuronIds: (nat) -> (vec nat64) query;
   getNeurons: (nat) -> (NeuronsResult) query;
   getProposalById: (nat, nat) -> (Result_3) query;
   get_admins: () -> (vec principal) query;
   is_admin: (principal) -> (bool) query;
   ledger: (nat) -> (vec LedgerEntry) query;
   myAxons: () -> (vec AxonPublic) query;
   propose: (NewProposal) -> (Result_3);
   recycle_cycles: (nat, nat) -> (nat);
   remove_admin: (principal) -> ();
   sync: (nat) -> (NeuronsResult);
   topAxons: () -> (vec AxonPublic) query;
   transfer: (nat, principal, nat) -> (Result);
   updateSettings: (principal, principal) -> ();
   update_master: (principal) -> ();
   vote: (VoteRequest) -> (Result);
   wallet_receive: () -> (nat);
 };
type AxonPublic = 
 record {
   balance: nat;
   id: nat;
   name: text;
   policy: Policy;
   proxy: Proxy;
   supply: nat;
   tokenHolders: nat;
   totalStake: nat;
   visibility: Visibility;
 };
type AxonProposal = 
 record {
   ballots: vec Ballot__1;
   creator: principal;
   id: nat;
   policy: Policy;
   proposal: ProposalType;
   status: vec Status;
   timeEnd: int;
   timeStart: int;
   totalVotes: Votes;
 };
type AxonCommandResponse = 
 variant {
   err: Error;
   ok: AxonCommandExecution;
 };
type AxonCommandRequest = 
 variant {
   AddMembers: vec principal;
   Burn: record {
           amount: nat;
           owner: principal;
         };
   Mint: record {
           amount: nat;
           recipient: opt principal;
         };
   Motion: Motion__1;
   Redenominate: record {
                   from: nat;
                   to: nat;
                 };
   RemoveMembers: vec principal;
   SetPolicy: Policy;
   SetVisibility: Visibility;
   Transfer: record {
               amount: nat;
               recipient: principal;
             };
 };
type AxonCommandExecution = 
 variant {
   Ok;
   SupplyChanged: record {
                    from: nat;
                    to: nat;
                  };
   Transfer:
    record {
      amount: nat;
      receiver: principal;
      senderBalanceAfter: nat;
    };
 };
type AxonCommand = 
 record {
   AxonCommandRequest;
   opt AxonCommandResponse;
 };
type ApproveGenesisKyc = record {principals: vec principal;};
type Amount = record {e8s: nat64;};
type AddOrRemoveNodeProvider = record {change: opt Change;};
type AddHotKey = record {new_hot_key: opt principal;};
type Action = 
 variant {
   AddOrRemoveNodeProvider: AddOrRemoveNodeProvider;
   ApproveGenesisKyc: ApproveGenesisKyc;
   ExecuteNnsFunction: ExecuteNnsFunction;
   ManageNetworkEconomics: NetworkEconomics;
   ManageNeuron: ManageNeuron;
   Motion: Motion;
   RewardNodeProvider: RewardNodeProvider;
   SetDefaultFollowees: SetDefaultFollowees;
 };
type AccountIdentifier = record {hash: vec nat8;};
service : () -> AxonService
